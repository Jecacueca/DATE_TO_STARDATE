import{Controller as t}from"@hotwired/stimulus";const e=class _AnimatedNumber extends t{connect(){this.lazyValue?this.lazyAnimate():this.animate()}animate(){let t=null;const step=e=>{t||(t=e);const a=e-t,n=Math.min(a/this.durationValue,1);this.element.innerHTML=Math.floor(n*(this.endValue-this.startValue)+this.startValue).toString(),n<1&&window.requestAnimationFrame(step)};window.requestAnimationFrame(step)}lazyAnimate(){new IntersectionObserver(((t,e)=>{t.forEach((t=>{t.isIntersecting&&(this.animate(),e.unobserve(t.target))}))}),this.lazyAnimateOptions).observe(this.element)}get lazyAnimateOptions(){return{threshold:this.lazyThresholdValue,rootMargin:this.lazyRootMarginValue}}};e.values={start:Number,end:Number,duration:Number,lazyThreshold:Number,lazyRootMargin:{type:String,default:"0px"},lazy:Boolean};let a=e;export{a as default};

